# DEV-ENV-REFACTOR-217: 開発環境のフロントエンド・バックエンド分離 実施計画

## 概要
本タスクは、開発環境を「静的フロントエンド（HTML+JS）＋APIバックエンド（Django/DRF）」の2サーバー構成に完全分離し、要件・バックログ・テスト・実装・運用手順を一貫して整理・反映するものです。

## 実施ステップ
- 各ステップで「検証方法」「エラー/自己修正記録」も必ず残すこと。

### 1. ドキュメント更新
  1-1. `docs/requirements.yml` を2サーバー構成・静的フロントエンド前提にアップデート
  1-2. `docs/backlog.yml` を新アーキテクチャ・API分離方針に沿ってアップデート
  1-3. `docs/test_requirements.md` に新構成のテスト要件（E2E, UI, API, サーバー構成）を追記・矛盾があれば解消・理由を明記

### 2. サーバー分離実装
  2-1. `webapp/app/urls.py` から TemplateView の削除（APIサーバー化）
  2-2. フロントエンドJS（`frontend/assets/js/issue_selection.js`, `file_upload.js` 他）でAPI呼び出しURLを絶対パス（例: `/api/v1/parse-file` → `http://localhost:8000/api/v1/parse-file` など）に修正
  2-3. バックエンドAPIのCORS設定・テスト（`webapp/app/tests.py` など）

### 3. README・運用手順更新
  3-1. `README.md` に「2サーバー起動・連携手順」「フロントエンド/バックエンドの開発・起動・テスト方法」を追記

### 4. E2E動作検証
  4-1. 2サーバー構成でのE2Eテスト（ファイルアップロード→解析→Issue選択→GitHub登録/ローカル保存）
  4-2. テスト・自己修正・エラー記録

### 5. コーディングルール・ナレッジ反映
  5-1. `docs/coding-rules.yml` に今回の分離・運用・テスト・API設計・JS絶対パス化等の知見を追記

## 検証・記録
- 各ステップで「検証方法」「エラー/自己修正記録」を必ず残すこと
- 重大な矛盾・課題があれば即時エスカレーション

---
# 完了定義（DoD）
- 2サーバー構成でE2E動作が確認できること
- ドキュメント・テスト要件・コーディングルールが最新状態で一貫していること
- 主要なAPI/JS/運用手順が全て新構成に対応していること
