{
    "name": "github-automation-tool",
    "type": "directory",
    "children": [
      {
        "name": ".build",
        "type": "directory",
        "description": "Build related files (Dockerfile, requirements)",
        "children": [
          { "name": "Dockerfile", "type": "file" },
          { "name": "requirements.in", "type": "file", "description": "Main application dependencies" },
          { "name": "clone-repositories.sh", "type": "file", "description": "Script to clone required repositories" },
          { "name": "repositories.txt", "type": "file", "description": "List of repositories to clone" },
          { "name": "context", "type": "directory", "description": "Build context files" },
          { "name": "dev-requirements.in", "type": "file", "description": "Development dependencies (e.g., pytest, ruff)", "optional": true },
          { "name": "requirements.txt", "type": "file", "description": "Compiled main dependencies (generated by pip-tools)", "optional": true },
          { "name": "dev-requirements.txt", "type": "file", "description": "Compiled dev dependencies (generated by pip-tools)", "optional": true }
        ]
      },
      { "name": ".coverage", "type": "file", "description": "Coverage report file" },
      { "name": ".pytest_cache", "type": "directory", "description": "Pytest cache directory" },
      {
        "name": "src",
        "type": "directory",
        "description": "Source code root",
        "children": [
          {
            "name": "github_automation_tool",
            "type": "directory",
            "description": "Main application package",
            "children": [
              { "name": "__init__.py", "type": "file", "description": "Package marker and version" },
              { "name": "main.py", "type": "file", "description": "CLI entry point (Typer)" },
              {
                "name": "adapters",
                "type": "directory",
                "description": "Adapters for external systems (Infrastructure Layer details)",
                "children": [
                  { "name": "__init__.py", "type": "file" },
                  { "name": "cli_reporter.py", "type": "file", "description": "Formats and reports results to CLI" },
                  { "name": "cli.py", "type": "file", "description": "Command-line interface adapter" },
                  { "name": "github_graphql_client.py", "type": "file", "description": "Client for GitHub GraphQL API" },
                  { "name": "github_rest_client.py", "type": "file", "description": "Client for GitHub REST API" },
                  { "name": "github_utils.py", "type": "file", "description": "Utilities for GitHub API interactions" },
                  { "name": "assignee_validator.py", "type": "file", "description": "Validates issue assignees" },
                  { "name": "ai_parser.py", "type": "file", "description": "Parses markdown using AI (LangChain)" }
                ]
              },
              {
                "name": "domain",
                "type": "directory",
                "description": "Core business logic and models",
                "children": [
                  { "name": "__init__.py", "type": "file" },
                  { "name": "models.py", "type": "file", "description": "Pydantic models (IssueData, ParsedRequirementData, etc.)" },
                  { "name": "exceptions.py", "type": "file", "description": "Custom domain/application exceptions" }
                ]
              },
              {
                "name": "infrastructure",
                "type": "directory",
                "description": "Low-level details (config loading, file reading)",
                "children": [
                  { "name": "__init__.py", "type": "file" },
                  { "name": "config.py", "type": "file", "description": "Settings loading (Pydantic-settings)" },
                  { "name": "file_reader.py", "type": "file", "description": "Reads input markdown file" }
                ]
              },
              {
                "name": "use_cases",
                "type": "directory",
                "description": "Application specific business logic (Interactors)",
                "children": [
                  { "name": "__init__.py", "type": "file" },
                  { "name": "create_repository.py", "type": "file", "description": "Use case for repository creation" },
                  { "name": "create_issues.py", "type": "file", "description": "Use case for issue creation" },
                  { "name": "create_resources.py", "type": "file", "description": "General resource creation use case" },
                  { "name": "create_github_resources.py", "type": "file", "description": "Main workflow orchestrator use case" }
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "tests",
        "type": "directory",
        "description": "Test suite",
        "children": [
          { "name": "__init__.py", "type": "file" },
          {
            "name": "adapters",
            "type": "directory",
            "children": [
              { "name": "__init__.py", "type": "file" },
              { "name": "test_cli_reporter.py", "type": "file" },
              { "name": "test_cli.py", "type": "file" },
              { "name": "test_github_graphql_client.py", "type": "file" },
              { "name": "test_github_rest_client.py", "type": "file" },
              { "name": "test_github_utils.py", "type": "file" },
              { "name": "test_assignee_validator.py", "type": "file" },
              { "name": "test_ai_parser.py", "type": "file" }
            ]
          },
          {
            "name": "domain",
            "type": "directory",
            "children": [
               { "name": "__init__.py", "type": "file" },
               { "name": "test_models.py", "type": "file", "description": "Tests for Pydantic models" }
            ]
          },
          {
            "name": "e2e_samples",
            "type": "directory",
            "description": "End-to-end test samples",
            "children": [
              { "name": "run.sh", "type": "file", "description": "Script to run e2e tests" },
              { "name": "sample_project_setup.md", "type": "file", "description": "Sample project setup documentation" }
            ]
          },
          {
            "name": "infrastructure",
            "type": "directory",
            "children": [
              { "name": "test_config.py", "type": "file" },
              { "name": "test_file_reader.py", "type": "file" }
            ]
          },
          {
            "name": "use_cases",
            "type": "directory",
            "children": [
              { "name": "__init__.py", "type": "file" },
              { "name": "test_create_repository.py", "type": "file" },
              { "name": "test_create_issues.py", "type": "file" },
              { "name": "test_create_github_resources.py", "type": "file" }
            ]
          }
        ]
      },
      {
        "name": "scripts",
        "type": "directory",
        "description": "Utility scripts",
        "children": [
          { "name": "test_ai_connection.py", "type": "file", "description": "Script to test AI connection" },
          { "name": "test_github_connection.py", "type": "file", "description": "Script to test GitHub connection" }
        ]
      },
      { "name": "pyproject.toml", "type": "file", "description": "Project metadata and tool configuration" },
      { "name": "README.md", "type": "file", "description": "Project documentation" },
      { "name": "config.yaml.sample", "type": "file", "description": "Sample configuration file" },
      { "name": "sample_find_project.py", "type": "file", "description": "Sample script to find projects" },
      { "name": ".gitignore", "type": "file", "description": "Specifies intentionally untracked files that Git should ignore" },
      { "name": "LICENSE", "type": "file", "description": "MIT License file" }
    ]
  }