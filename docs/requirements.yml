document_info:
  title: "GitHub Automation Tool - System Requirements"
  version: "2.6" # バージョン更新
  last_updated: "2025-06-03 (JST)" # 日付更新
  status: "Core Requirements Defined - Awaiting Backlog Prioritization"
  related_documents:
    - "docs/backlog.yml (Product Backlog - User Stories, Tasks, Acceptance Criteria)"
    - "docs/glossary.md (Project Glossary)"
    - "docs/ui_ux_specifications.md (UI/UX Specifications)"
    - "docs/diagrams/context-diagram.md (High-Level context - To be created)"
    - "docs/diagrams/architecture-diagram.md (High-Level Architecture - To be created)"
    - "docs/github_setup_defaults.yml (GitHub Setup Defaults - Labels, Milestones, etc.)"
    - "README.md (Project Overview, Setup, and Technical Stack)"

sections:
  - heading: "1. 概要と背景"
    content: |
      ソフトウェア開発プロジェクトにおけるGitHubリソースの初期セットアップ作業、特に多様な形式のファイルからのIssue情報の読み込み、解釈、選択的処理を効率化することを目的としたツールです。
      本ツールは、AIを活用して入力ファイル内のIssueの区切り方（主に各Issueの開始を示す先頭キー/開始パターンを推論し、他の一般的な区切りパターンはフォールバックや設定ベースで対応）や、各Issue内の記述と標準的なIssueフィールド（タイトル、説明など）との対応関係（キーマッピングルール）を動的に推論します。
      この推論されたルール（またはフォールバック/設定ルール）に基づき、ファイルを解析し構造化データに変換することで、キーの揺らぎやフォーマットの不統一といった課題を解決します。Web UIおよびCLIの2つのインターフェースを提供します。
    subsections:
      - heading: "解決したい課題"
        content: |
          - 多様な形式（Markdown, YAML, JSON）で記述されたIssue情報を一元的に扱い、GitHub Issueとして登録するまでのプロセスを自動化・効率化する。
          - Issue情報の解釈（Issueの区切り方の特定、入力キーと標準フィールドの対応関係の発見など）をAI支援によって行い、手作業でのデータマッピングの手間を削減する。
          - GitHubへのリソース作成（リポジトリ、ラベル、マイルストーン、Issue、プロジェクト連携）を冪等性を保ちつつ実行する。
          - ローカルでのIssue情報のプレビュー、選択、およびオプションとしてのファイル分割・保存機能を提供する。

  - heading: "2. システム化の目的とゴール"
    subsections:
      - heading: "このシステムを導入することで達成したい具体的なビジネス目標"
        content: |
          - Issue情報ファイルからのGitHubリソース（リポジトリ、Issue、ラベル、マイルストーン、プロジェクトアイテム）一括登録作業のリードタイムを大幅に短縮する。
          - Issue登録・設定に関する手作業起因のエラーを削減し、データの一貫性を向上させる。
          - 開発者が定型的なセットアップ作業から解放され、より創造的なタスクに集中できる時間を増やす。
      - heading: "システムが満たすべき主要な成功基準"
        content: |
          - **コア機能の共通化:** Web UIとCLIは、Issue情報の解釈、GitHubリソース作成といったコア機能について、共通のバックエンドロジック（`core_logic`内のUseCase群）を利用して実現すること。
          - **入力処理:**
            - 指定されたIssue情報ファイル（単一の`.md`, `.yml`, `.json`）を読み込むこと。
            - AIパーサーが、ファイル内容全体を分析し、Issueの区切りルール（主に各Issueの先頭キー/開始パターンを推論）およびキーマッピングルール（入力キーと`IssueData`フィールドの対応）を推論できること。AIによる先頭キー推論が困難な場合は、フォールバックまたは設定ファイルで指定された区切りルール（Markdownの水平線やヘッダーレベル、YAML/JSONのリスト形式など）を適用できること。キーの揺らぎや多様な記述スタイルを吸収できること。
            - 決定された区切りルールと推論されたキーマッピングルールに基づき、ファイルがIssueブロックに分割され、各ブロックが構造化データモデル `ParsedSourceFileContent`（内部に`IssueData`リストとファイル全体のメタ情報を含む）に変換できること。
            - ラベルとマイルストーンについては、AIが抽出した記述を`github_setup_defaults.yml` で定義された正規の名称と照合し、正規化できること。
            - AIによるルール推論の信頼度が低い（例: 先頭キーの一貫性不足、必須フィールドのマッピング成功率低）、または主要な情報抽出が困難な場合、その旨をユーザーに明確にフィードバックし、必要に応じて処理を中断または警告を表示できること。
          - **Web UI機能:** (詳細は `docs/ui_ux_specifications.md` および `docs/backlog.yml` の関連ユーザーストーリーを参照)
            - ファイルアップロード、解析結果のIssue一覧プレビュー（詳細表示機能付き）、処理対象Issueの選択（個別・一括）ができること。
            - GitHubリポジトリ名、プロジェクト名（任意）、Dry Runモード、AIプロバイダー/モデル/APIキーを設定し、GitHubへのIssue登録アクションを実行できること。
            - オプションとして、解析されたIssue情報をローカルファイルシステムにYAML形式で分割保存できること。
          - **CLI機能:** Web UIで提供される主要なGitHubリソース作成フローを、コマンドライン引数を通じて実行できること。(詳細は `docs/backlog.yml` の関連ユーザーストーリーを参照)
          - **GitHub連携:**
            - リポジトリ、ラベル、マイルストーンを必要に応じて作成・確認できること。
            - 担当者の有効性をGitHub API経由で検証し、無効な担当者はIssue割り当てから除外できること。
            - Issueをタイトル、本文、ラベル、マイルストーン、検証済み担当者と共に作成できること。
            - 作成されたIssueをGitHub Projects (V2) にアイテムとして追加できること（任意）。
          - **操作性・フィードバック:** Web UIは直感的で分かりやすく、CLIは効率的に操作できること。処理結果（成功、失敗、スキップ、エラー詳細）が各インターフェースを通じて明確にユーザーに提示されること。
          - **保守性/拡張性:** クリーンアーキテクチャの原則に基づき、UI層、アプリケーションサービス層（検討中）、UseCase層、Adapter層、Infrastructure層が適切に分離されていること。
          - **柔軟性:** 設定ファイル (`config.yaml`) や環境変数により、AIモデル名、プロンプトテンプレート、ログレベルなどを構成可能であること。

  - heading: "3. スコープ定義"
    subsections:
      - heading: "対象範囲（In Scope）"
        items:
          - type: "入力"
            details:
              - "UTF-8エンコードされた単一のIssue情報ファイル（`.md`, `.yml`, `.json`、最大10MB）。"
              - "Web UIを通じた対話: ファイルアップロード、Issue選択、GitHub登録指示（リポジトリ名、プロジェクト名、DryRun、AI設定）。"
              - "CLI引数: ファイルパス、リポジトリ名、プロジェクト名（任意）、DryRunモード、設定ファイルパス。"
              - "設定ファイル (`config.yaml`): AIモデル名、プロンプトテンプレート、ログレベルなど。"
              - "環境変数: GitHub PAT、AI APIキー、AIモデルタイプ、ログレベル（設定ファイルを上書き）。"
          - type: "処理 (コアロジック)"
            details:
              - "ファイル読み込みと基本的な検証。"
              - "AIによる区切りルール（主に先頭キー/開始パターン）とキーマッピングルールの推論。"
              - "ルールベースの解析とマッピング: AIが推論したルール、またはフォールバック/設定ルールに基づき、ファイルをIssueブロック群に分割し、各ブロックを`IssueData`にマッピングして`ParsedSourceFileContent`を生成。"
              - "ラベルとマイルストーンの正規化: 抽出されたラベル・マイルストーン情報を`github_setup_defaults.yml`の定義と照合し、正規化。"
              - "GitHubリソース作成/確認 (`CreateGitHubResourcesUseCase`): リポジトリ、ラベル、マイルストーン、Issue（担当者検証含む）、プロジェクト連携を実行。"
              - "Dry Runモードサポート。"
          - type: "処理 (Web UI固有)"
            details:
              - "アップロードされたファイルのIssue一覧プレビュー機能。"
              - "処理対象Issueの対話的な選択機能。"
              - "ローカルへのIssueファイル分割・保存機能（YAML形式、index.html生成）。"
          - type: "処理 (CLI固有)"
            details:
              - "コマンドライン引数に基づくバッチ的な処理実行。"
          - type: "出力"
            details:
              - "GitHub上のリソース: 作成・設定されたリポジトリ、ラベル、マイルストーン、Issue、プロジェクトアイテム。"
              - "Web UI上での表示: Issue一覧、選択状態、処理結果（成功、エラー、スキップなど）。"
              - "標準出力/標準エラー出力 (CLI実行時) / サーバーログ: 処理状況、エラーメッセージ、整形済み結果レポート。"
              - "（オプション）分割されたIssueファイル群（ローカル保存時、YAML形式）。"
          - type: "実行形態"
            details:
              - "コンテナ上で動作するPython/Django製APIバックエンドアプリケーション。"
              - "**静的HTML/JS/CSSで構成されたフロントエンド（GitHub Pages等での独立デプロイ可）と、APIサーバー（Django/DRF）を完全分離して運用。**"
              - "**CORS設定により、フロントエンドからのAPIリクエストのみ許可。**"
              - "**E2Eテスト・運用手順・開発フローは2サーバー構成を前提に整理。**"
              - "Python CLIアプリケーション（Typer）。
      - heading: "対象範囲外（Out of Scope）"
        items:
          - "GitHub上のIssueやリポジトリの状態を読み取り、ローカルのIssue定義ファイルと双方向で同期する機能。"
          - "Issueの更新機能（本バージョンのスコープでは新規作成を優先）。"
          - "Markdownファイル自体の生成・編集支援機能。"
          - "Pull Request の自動作成や連携。"
          - "GitHub以外のプラットフォーム連携 (Jira, GitLab等)。"
          - "高度なAPI呼び出しリトライ機構 (現状)。"
          - "**Web UIにおけるモダンなJavaScriptフレームワーク（React, Vueなど）の利用。**"
          - "**DjangoテンプレートによるHTMLレンダリング。**"

  - heading: "4. 主要なステークホルダーと役割"
    content: |
      - 開発者 (主要ユーザー): GitHub セットアップ作業の効率化、ローカルでのIssue情報管理の簡便化を期待。ツールの日常的な利用者。
      - プロジェクトマネージャー (PM): プロジェクト管理の効率化・標準化を期待。入力Issueファイルの記述ルール策定に関与。ツールの導入効果を測定する。

  - heading: "5. ユースケース定義"
    content: |
      主要なユースケースの概要は以下の通りです。各ユースケースの詳細なフロー、事前条件、事後条件、関連ユーザーストーリーは `docs/backlog.yml` を参照してください。
    subsections:
      - title: "UC-Web-001: Web UIによるIssue情報ファイルの処理とGitHubリソース作成"
        actor: "開発者"
        description: |
          静的Web UI（HTML+JS+Bootstrap5）を通じてIssue情報ファイルをアップロードし、内容をAPIサーバー（Django REST Framework）経由で解析・プレビュー後、選択したIssueに基づいてGitHub上にリポジトリ、ラベル、マイルストーン、Issueを作成し、必要に応じてプロジェクトに連携する。オプションとしてローカルにも保存できる。
          (関連ユーザーストーリー: US-001, US-002, US-003, US-004, US-WEBUI-AI-CONFIG など)
      - title: "UC-CLI-001: CLIによるGitHubリソース一括登録"
        actor: "開発者"
        description: |
          コマンドラインインターフェースからIssue情報ファイルと各種オプションを指定し、GitHub上にリポジトリ、ラベル、マイルストーン、Issueを作成し、必要に応じてプロジェクトに連携する。
          (関連ユーザーストーリー: US-005 など)
      - title: "UC-Common-001: Dry Runモードでの実行"
        actor: "開発者"
        description: |
          Web UIまたはCLIからDry Runモードを指定することで、実際にGitHubへの変更を行わずに、実行される予定の操作内容を確認する。
          (関連ユーザーストーリー: US-006 など)

  - heading: "6. ドメインモデル"
    content: |
      主要なドメインモデルの概要は以下の通りです。詳細は `webapp/core_logic/github_automation_tool/domain/models.py` および `docs/glossary.md` を参照してください。
    subsections:
      - title: "値オブジェクト (Value Object)"
        items:
          - "`IssueData`: 単一Issueの構造化された情報。"
      - title: "集約 (Aggregate)"
        items:
          - "`ParsedSourceFileContent`: 単一の入力ファイルから解析・マッピングされた情報全体（`IssueData`リストとファイル全体のメタ情報）。"
          - "`CreateIssuesResult`: Issue作成処理のGitHub操作結果。"
          - "`CreateGitHubResourcesResult`: GitHubリソース作成ワークフロー全体の実行結果。"
          - "`LocalFileSplitResult`: ローカルファイル保存処理の結果。"
      - title: "ドメイン例外 (Domain Exception)"
        items:
          - "`GitHubClientError` (基底)", "`GitHubAuthenticationError`", "`GitHubRateLimitError`", "`GitHubResourceNotFoundError`", "`GitHubValidationError`", "`AiParserError`", "`FileReaderError`", "`ParsingError`"

  - heading: "7. 機能要件"
    content: |
      主要な機能要件は以下の通りです。各機能要件の詳細な受け入れ基準や背景となるユーザーストーリーは `docs/backlog.yml` を参照してください。
    items:
      - id: "FR-InputProcessing"
        description: "システムは、指定された単一のIssue情報ファイル（Markdown, YAML, JSON）を読み込み、AIパーサーを用いてIssueの区切りルールとキーマッピングルールを推論し、それに基づいて構造化データ `ParsedSourceFileContent` を生成できること。プレビュー表示はJavaScriptによる動的なDOM操作で行う。 (US-001 など)"
        priority: must_have
      - id: "FR-WebUI-Interaction"
        description: "Web UIは、静的HTML+Bootstrap5+最小限のJavaScriptで構築され、ファイルアップロード、Issue一覧表示・選択、GitHub登録指示、ローカル保存指示、AI設定などの対話的な操作を、すべてAPIサーバー（Django REST Framework等）との通信を通じて実現する。DjangoテンプレートによるHTMLレンダリングは行わない。 (US-001, US-002, US-003, US-004, US-WEBUI-AI-CONFIG など)"
        priority: must_have
      - id: "FR-CLI-Execution"
        description: "CLIは、コマンドライン引数を通じて、Web UIの主要なGitHubリソース作成フローを実行できること。 (US-005 など)"
        priority: must_have
      - id: "FR-GitHub-ResourceCreation"
        description: "システムは、`ParsedSourceFileContent` とユーザー指示に基づき、GitHub上にリポジトリ、ラベル、マイルストーン、Issue（担当者検証含む）、プロジェクトアイテムを適切に作成・設定できること。 (US-003, US-005 など)"
        priority: must_have
      - id: "FR-DryRun"
        description: "システムは、Web UIとCLIの両方でDry Runモードを提供し、実際の変更を伴わないシミュレーション実行ができること。 (US-006 など)"
        priority: must_have
      - id: "FR-LocalSave"
        description: "システムは、Web UIからの指示に基づき、解析されたIssue情報をローカルファイルシステムにYAML形式で分割保存し、目次ファイル(`index.html`)を生成できること。保存処理もAPI経由で行う。 (US-004 など)"
        priority: should_have
      - id: "FR-Parse-001"
        description: "AIがファイル構造から区切りルールとマッピングルールを推論する。推論の信頼性に関する基準を設け、信頼性が低い場合はエラーまたは警告をユーザーに提示する。"
        priority: must_have
      - id: "FR-Map-002"
        description: "AIによるフィールドマッピング推論が不調な場合、docs/github_setup_defaults.yml等で定義されたデフォルトマッピングルールをフォールバックまたはヒントとして利用する。"
        priority: must_have
      - id: "FR-Feedback"
        description: "システムは、処理の各段階における結果（成功、失敗、スキップ、エラー詳細）を、Web UIおよびCLIを通じてユーザーに明確にフィードバックすること。AIによる解析結果の信頼度が低い場合は、その旨の警告も含む。"
        priority: must_have
      - id: "FR-LabelMilestoneNormalization"
        description: "システムは、Issue情報ファイルから抽出されたラベルおよびマイルストーン情報を、`github_setup_defaults.yml` に定義された正規の名称と照合し、正規化できること。"
        priority: must_have

  - heading: "8. 非機能要件"
    subsections:
      - title: "ユーザビリティ"
        items:
          - "Web UIは直感的で分かりやすいデザインであること（Bootstrap5）。主要な操作が容易に行えること。"
          - "CLIは効率的な操作が可能であること。"
          - "AIの解析結果がユーザーにとって理解可能であり、問題がある場合にユーザーが次のアクション（ファイル修正など）を取りやすいようなフィードバックを提供すること。"
      - title: "性能"
        items:
          - "Web UIのレスポンスタイムは通常操作1秒以内。"
          - "数十件程度のIssueを含むファイルの処理が現実的な時間（数秒～数十秒）で完了。"
      - title: "セキュリティ"
        items:
          - "GitHub PATおよびAI APIキーは環境変数または`.env`ファイルで管理し、コード中にハードコードしない (`SecretStr`使用)。"
          - "`.env`ファイルはリポジトリにコミットしない。"
      - title: "保守性/拡張性"
        items:
          - "クリーンアーキテクチャの原則に基づき、Presentation層（Web UI, CLI）、Application Service層（検討中、Web UI用）、Core Logic層（Use Cases, Domain Models, Adapters）、Infrastructure層を分離。"
          - "UI技術や外部APIの変更がコアロジックに与える影響を最小限に抑える。"
      - title: "テスト容易性"
        items:
          - "主要機能はユニットテストで検証可能。"
          - "外部APIへの依存はモック可能。"
      - title: "レポーティング"
        items:
          - "CLI: `CliReporter` を使用しコンソールに結果出力。"
          - "Web UI: Djangoメッセージフレームワークやテンプレートを通じてUI上に結果表示。詳細はサーバーログに出力。"
      - title: "技術スタック"
        content: |
          主要な技術スタックについては、プロジェクトのルートにある `README.md` の「技術スタック」セクションを参照してください。
          **Web UIのフロントエンド技術には、HTML、CSS、JavaScript（最小限）およびBootstrap 5を採用し、モダンなJavaScriptフレームワークは使用しない。**

  - heading: "9. 受け入れ基準"
    content: |
      各ユースケースおよび主要機能に関する詳細な受け入れ基準は、`docs/backlog.yml` 内の対応するユーザーストーリーの `acceptance_criteria` を参照のこと。
      システム全体の主要な受け入れ基準は以下の通りです。
      - **AC-System-WebUI-E2E:** ユーザーがWeb UIを通じて主要なIssue処理フロー（ファイルアップロード、解析、プレビュー、選択、GitHub登録、ローカル保存、DryRun）を一通り実行でき、期待される結果（GitHub上のリソース作成、ローカルファイル生成、UI上のフィードバック）が得られること。
      - **AC-System-CLI-E2E:** ユーザーがCLIを通じて主要なIssue処理フロー（ファイル指定、GitHub登録、DryRun）を一通り実行でき、期待される結果（GitHub上のリソース作成、コンソール上のフィードバック）が得られること。
      - **AC-System-CoreLogic-Integrity:** Web UIとCLIのどちらから実行しても、同じ入力と指示に対しては、コアロジックが一貫した処理を行い、同等の結果を生成すること（インターフェース固有の処理を除く）。
      - **AC-System-Configurability:** 設定ファイルおよび環境変数を通じて、AIモデル、プロンプト、ログレベルなどの主要な動作パラメータが正しくカスタマイズできること。
      - **AC-System-ErrorHandling:** システムが予期されるエラー（認証失敗、API制限、ファイル不正など）を適切にハンドリングし、ユーザーに分かりやすいフィードバックを提供できること。

  - heading: "10. 用語集"
    content: |
      本プロジェクトに関連する主要な用語や略語の定義は、`docs/glossary.md` を参照してください。

  - heading: "11. 制約条件・前提条件"
    items:
      - id: "11.1"
        description: |
          **認証情報の必須設定:**
          本システムを利用するには、以下の有効な認証情報が事前に設定されている必要があります。
          - **GitHub Personal Access Token (PAT):** 環境変数 `GITHUB_PAT` に設定。リポジトリ操作 (`repo` スコープ) および GitHub Projects (V2) 連携 (`project` スコープ) の権限が必要です。
          - **AIサービス APIキー:** 選択したAIサービス（OpenAIまたはGemini）に対応するAPIキーを、環境変数 (`OPENAI_API_KEY` または `GEMINI_API_KEY`) に設定。
          これらの認証情報が未設定、空、または無効な場合、アプリケーションはエラーを検出し処理を中断します。
        category: constraint
        priority: must_have
        acceptance_criteria_reference: "docs/backlog.yml (AC-11.1-01 ~ AC-11.1-04)"

      - id: "11.2"
        description: |
          **入力ファイルの仕様:**
          - 形式: UTF-8エンコードされた単一のIssue情報ファイル。
          - 拡張子: `.md` (Markdown), `.yml` (YAML), または `.json` (JSON) のいずれか。
          - サイズ: 最大10MBまで。
        category: constraint
        priority: must_have

      - id: "11.3"
        description: |
          **主要技術スタックの採用:**
          - コアロジック: Python
          - Web UI: Djangoフレームワーク、Bootstrap 5
          - CLI: Typerフレームワーク
          詳細は `README.md` の「技術スタック」セクションを参照してください。
        category: constraint
        priority: must_have

      - id: "11.4"
        description: |
          **外部APIへの依存と可用性:**
          本システムは、GitHub APIおよび選択されたAIサービスAPI（OpenAI/Gemini）の正常な稼働に依存します。これらの外部APIが利用不可またはレート制限に達した場合、関連機能は期待通りに動作しない可能性があります。
        category: constraint
        priority: high

      - id: "11.5"
        description: |
          **実行環境:**
          - Dockerコンテナ環境での実行を推奨します。
          - 開発およびテストには、提供されるDev Container環境の利用を推奨します。
        category: assumption
        priority: should_have

      - id: "11.6"
        description: |
          **Issue更新機能のスコープ:**
          現行バージョンでは、GitHub Issueの新規作成を主な対象とし、既存Issueの更新機能はスコープ外とします。
        category: constraint
        priority: must_have