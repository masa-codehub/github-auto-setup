# docs/coding-rules.yml
- rule_id: "CR-018"
  title: "Django REST APIのファイルアップロード時は例外ハンドリングとバリデーションを徹底する"
  description: |
    ファイルアップロードAPI実装時は、ファイル未添付・不正形式・サイズ超過・パース失敗・AI解析エラー・予期せぬ例外など、あらゆる異常系を網羅的に例外ハンドリングし、HTTP 400/500レスポンスを適切に返すこと。テスト要件を満たす単体テストも必ず実装する。
  category: "API設計・例外処理"
  example_bad: |
    class FileUploadAPIView(APIView):
        def post(self, request):
            file = request.FILES.get('file')
            parsed = parse(file.read())  # 例外処理なし
            return Response(parsed)
  example_good: |
    class FileUploadAPIView(APIView):
        def post(self, request):
            file = request.FILES.get('file')
            if not file:
                return Response({"detail": "No file uploaded."}, status=400)
            try:
                parsed = parse(file.read())
                return Response(parsed)
            except (ParsingError, AiParserError) as e:
                return Response({"detail": str(e)}, status=400)
            except Exception as e:
                return Response({"detail": "Unexpected error: " + str(e)}, status=500)

- rule_id: "CR-019"
  title: "DRFのAPIViewでは権限クラスを明示的に指定する"
  description: "Django REST FrameworkのAPIViewまたはViewSetでは、たとえデフォルト設定に依存している場合でも、`permission_classes`属性を明示的に指定すべきである。これにより、クラス単体でその権限要件が明確になり、可読性と保守性が向上する。"
  category: "セキュリティ"
  example_bad: |
    # settings.pyでデフォルトが設定されているため、省略されている
    class MyProtectedView(APIView):
        # permission_classes is not set
        def get(self, request):
            ...
  example_good: |
    from rest_framework.permissions import IsAuthenticated

    class MyProtectedView(APIView):
        permission_classes = [IsAuthenticated]

        def get(self, request):
            ...

- rule_id: "CR-020"
  title: "AIを利用する処理は信頼度評価とフォールバック機構を必須とする"
  description: |
    AI（大規模言語モデル等）を利用するロジックでは、推論結果の信頼度を必ず評価し、信頼度が低い場合やエラー時には警告・エラー情報を返す、もしくは決定論的な処理にフォールバックする仕組みを実装すること。これによりAIの不確実性によるシステム障害や誤動作を防ぐ。
  category: "AI・信頼性設計"
  example_bad: |
    def parse_with_ai(text):
        # AIの出力をそのまま利用し、信頼度やエラーを考慮しない
        return ai_model.predict(text)
  example_good: |
    def parse_with_ai(text):
        result = ai_model.predict(text)
        confidence = evaluate_confidence(result)
        if confidence < 0.7:
            return {"warning": "AI推論の信頼度が低い", "result": result}
        return result

- rule_id: "CR-021"
  title: "GitHubリソース作成・ローカル保存APIのClean Architecture/TDD例外設計・テスト知見の反映"
  description: |
    - APIエンドポイントでは、APIキーやdry_run等の重要パラメータを必ず明示的に抽出し、ユースケース層に安全に受け渡すこと。
    - 外部API（GitHub等）やファイルシステム操作で発生しうる全ての例外を網羅的にハンドリングし、HTTPステータス・エラー詳細を含む標準化JSONで返却すること。
    - ユースケース層では、ラベル・マイルストーン・プロジェクト連携等の個別リソース作成失敗時も "Unexpected error: ..." でエラー内容を整形し、テストで検証可能な形で返すこと。
    - テストでは外部APIやFSへの依存を必ずpatch/mockで排除し、安定して全パス/異常系を再現できるようにする。
    - これらの設計・実装・テスト知見を今後のAPI開発・レビュー時の必須ルールとする。
  category: "API設計・Clean Architecture・テスト設計"
  example_good: |
    class CreateGitHubResourcesAPIView(APIView):
        authentication_classes = [CustomAPIKeyAuthentication]
        permission_classes = []
        def post(self, request):
            dry_run = request.data.get('dry_run', False)
            # ...APIキー抽出・ユースケース呼び出し...
            try:
                result = use_case.execute(...)
                return Response(serializer.data, status=200)
            except (GitHubAuthenticationError, GitHubClientError) as e:
                return Response({"detail": str(e)}, status=400)
            except Exception as e:
                return Response({"detail": f"Unexpected error: {e}"}, status=500)
    # テスト例
    with patch("app.views.CreateGitHubResourcesUseCase.execute", return_value=dummy_result):
        response = client.post(url, {...}, format="json")
        assert response.status_code == 200

- rule_id: "CR-022"
  title: "本番コードにテスト用分岐を持ち込まない"
  description: |
    テスト容易性のために本番コードに環境変数やフラグで型チェックや例外処理をスキップする分岐を入れるのは避けること。テストではMagicMockやcreate_autospec等のモック機能を活用し、isinstanceチェックをパスさせる。どうしても分岐が必要な場合は、テスト専用のヘルパーやDIで切り替える設計とする。
  category: "テスト容易性・本番品質"
  example_bad: |
    def __init__(self, ...):
        if os.environ.get('SKIP_TYPE_CHECK_FOR_TESTS'):
            pass  # 型チェックスキップ
        else:
            if not isinstance(client, SomeClass):
                raise TypeError()
  example_good: |
    from unittest.mock import MagicMock
    def __init__(self, client):
        if not (isinstance(client, SomeClass) or type(client).__name__ in ("MagicMock", "NonCallableMagicMock")):
            raise TypeError()

- rule_id: "CR-023"
  title: "pytestの依存注入モックはテスト本体で返り値を必ず設定する"
  description: |
    pytestのfixtureで依存コンポーネントをMagicMockやcreate_autospecで生成する場合、テスト本体で返り値やside_effectを必ず明示的に設定すること。fixture内で新たにモックを生成し直すと、テスト本体の設定が反映されず意図しない失敗を招く。
  category: "テスト設計・モック"
  example_bad: |
    @pytest.fixture
    def use_case():
        mock_dep = MagicMock()
        return UseCase(dep=mock_dep)

    def test_xxx(use_case):
        use_case.dep.some_method.return_value = 123  # ← 反映されない
  example_good: |
    @pytest.fixture
    def mock_dep():
        return MagicMock()

    @pytest.fixture
    def use_case(mock_dep):
        return UseCase(dep=mock_dep)

    def test_xxx(use_case, mock_dep):
        mock_dep.some_method.return_value = 123  # ← 反映される

- rule_id: "CR-024"
  title: "最短の手番で実装を完了させるための作業ルール"
  description: |
    実装・修正・レビュー対応など全ての作業は、最短の手番（最小のアクション数）で完了することを最優先とする。必要な情報は自動で収集し、推測できる部分は即時実行し、不要な確認や質問を挟まず、連続的かつ効率的にタスクを進める。エージェント型開発支援の原則とする。
  category: "開発プロセス・エージェント行動原則"
  example_bad: |
    // 毎回ユーザーに細かく確認し、手が止まる
    // 既知の手順でも都度質問や確認を挟む
    // 1つの修正ごとに手動で指示を待つ
  example_good: |
    // 必要な情報は自動で検索・推論し、即座に実装を進める
    // まとめて修正・テスト・検証まで一気通貫で完了させる
    // ユーザーの手戻りや待ち時間を最小化する

- rule_id: "CR-025"
  title: "フロントエンドの依存・テスト・ビルドはfrontendディレクトリ配下で一元管理し、ESM構成を安定させる"
  description: |
    Django等のバックエンドとフロントエンドを明確に分離して開発する場合、フロントエンドの依存（node_modules）・package.json・テスト・ビルド・CI/CDはfrontendディレクトリ配下に統合・完結させること。
    JestでESM(import/export)構文のテストを行う場合はBabel(babel.config.cjs)とJest(jest.config.mjs)の設定をfrontend配下に置き、`npm test`等のコマンドは必ずfrontendディレクトリ内で実行する。
    これにより、依存の競合、ESM構文エラー、設定ファイルが見つからない等の問題を防止し、保守性と再現性を高める。
  category: "フロントエンド・モノレポ運用指針"
  example_bad: |
    # ルートや複数箇所にnode_modulesが存在
    npm install       # /app/node_modulesができる
    cd frontend && npm install  # frontend/node_modulesもできる
    # ルートからテストを実行しようとしてエラーになる
    npm test
  example_good: |
    # frontend配下でのみ依存・テスト・ビルドを管理
    cd frontend
    npm install
    npm test
    # → frontend/node_modulesのみで全て完結し、設定も安定

- rule_id: "CR-026"
  title: "複数の分割戦略を持つ処理はStrategyパターンで分離する"
  description: |
    Markdown/YAML/JSONなど複数の分割ルールや戦略を扱う場合、if/elseや分岐の肥大化を避け、各戦略を関数・クラスとして分離しStrategyパターンで実装することで、拡張性・テスト容易性・保守性を高める。
  category: "設計・拡張性"
  example_bad: |
    def split(content, filetype, rule=None):
        if filetype == "md":
            # ...
        elif filetype == "yaml":
            # ...
        elif filetype == "json":
            # ...
  example_good: |
    class MarkdownSplitter: ...
    class YamlSplitter: ...
    class JsonSplitter: ...
    def split(content, filetype, rule=None):
        splitter = get_splitter(filetype)
        return splitter.split(content, rule)

- rule_id: "CR-027"
  title: "Django/Pythonパッケージのimportエラーはファイルの空・破損・パス設定を必ず確認する"
  description: |
    importエラーが発生した場合、まず該当ファイルが空でないか、正しいパスに存在するか、__init__.pyの有無、pytestやPYTHONPATHの設定を確認すること。ファイルが空の場合は正しい実装を再投入し、パス設定が正しければpytestのpythonpathやモジュール解決を見直す。CI/CDや本番環境でも同様のチェックを徹底する。
  category: "パッケージ管理・デバッグ"
  example_bad: |
    # ファイルが空でimport error
    from core_logic.use_cases.local_save_use_case import LocalSaveUseCase  # ImportError
  example_good: |
    # ファイル内容・パス・pythonpathを確認し、正しい実装を再投入
    from core_logic.use_cases.local_save_use_case import LocalSaveUseCase

- rule_id: "CR-028"
  title: "データ変換ロジックは独立した純粋関数としてカプセル化する"
  description: "文字列からリストへの変換や特定パターンの抽出など、再利用可能なデータ変換処理は、それ自身の責務に特化した純粋関数として実装する。これにより、ロジックの単体テストが容易になり、異なる箇所からの再利用性も向上する。"
  category: "保守性・テスト容易性"
  example_bad: |
    # マッピング処理の途中で変換ロジックがハードコードされている
    def map_data(raw_data):
      issue = IssueData()
      if 'labels' in raw_data:
        # カンマ区切りを直接処理
        issue.labels = [label.strip() for label in raw_data['labels'].split(',')]
      return issue
  example_good: |
    # 変換ロジックが独立した関数になっている
    def to_list_by_comma(text: str) -> list[str]:
      return [item.strip() for item in text.split(',') if item.strip()]

    def map_data(raw_data):
      issue = IssueData()
      if 'labels' in raw_data:
        issue.labels = to_list_by_comma(raw_data['labels'])
      return issue

- rule_id: "CR-029"
  title: "ビジネスロジックは責務毎にサービスクラスとして分離する"
  description: "ラベル正規化のような明確なビジネスロジックは、UseCase内に直接実装するのではなく、専用のサービスクラス（例: LabelMilestoneNormalizerSvc）として`adapters`層などに分離する。UseCaseは、そのサービスをDI（依存性注入）によって利用する。これにより、ロジックの再利用性とテスト容易性が向上し、UseCaseはビジネスフローの関心事に集中できる。"
  category: "設計・単一責任原則"
  example_bad: |
    # UseCase内に正規化ロジックが混在している
    class CreateResourcesUseCase:
        def execute(self, issue_data):
            # ...
            # Normalization logic is here
            normalized_labels = []
            for label in issue_data.labels:
                # ...
            issue_data.labels = normalized_labels
            # ...
  example_good: |
    # 正規化サービスをDIで利用する
    class CreateResourcesUseCase:
        def __init__(self, normalizer: NormalizerSvc):
            self.normalizer = normalizer

        def execute(self, issue_data):
            # ...
            self.normalizer.normalize_issue(issue_data)
            # ...

- rule_id: "CR-030"
  title: "API/フロントエンド間のFormDataキー・エンドポイント仕様は一貫性を維持する"
  description: |
    バックエンドAPIとフロントエンドの間でファイルアップロード等のFormDataキー名やエンドポイントURL仕様（末尾スラッシュ有無等）は必ず統一し、テスト・実装・ドキュメントで一貫性を保つこと。これにより、テストの不整合や運用時のバグを防止する。
  category: "API設計・運用一貫性"
  example_bad: |
    // API側: request.FILES['file']
    // フロント側: formData.append('issue_file', ...)
    // →テストや本番でアップロード失敗
  example_good: |
    // API側・フロント側とも formData.append('file', ...)
    // →テスト・本番で常に動作が一致

- rule_id: "CR-031"
  title: "テスト失敗時の自己修正ループは必ず記録し、再現性を担保する"
  description: |
    テスト失敗や実装エラーが発生した場合、原因・誤ったアプローチ・最終的な解決策を内部ログやコミットメッセージ等で必ず記録し、同様の問題が再発した際に迅速に再現・修正できるようにする。これにより、開発プロセスの透明性と品質を高める。
  category: "開発プロセス・品質保証"
  example_bad: |
    # テスト失敗時に修正内容や原因を記録せず、同じ問題が繰り返される
  example_good: |
    # テスト失敗時のエラー内容・修正内容・学びを記録し、次回以降の修正効率を向上

- rule_id: "CR-032"
  title: "テスト実行時はpackage.jsonの場所を自動で探索し、適切なディレクトリでテストを実行する"
  description: |
    テストを実行する際には、必ず`package.json`の存在するディレクトリを自動で探索し、そこでテストを実行すること。これにより、テスト環境の一貫性が保たれ、実行忘れやパスの誤設定によるエラーを防止できる。
  category: "開発プロセス・テスト"
  example_bad: |
    # package.jsonの場所を考慮せず、誤ったディレクトリでテストを実行
    npm test
  example_good: |
    # 自動でpackage.jsonを探索し、適切なディレクトリでテストを実行
    cd $(dirname $(find . -name package.json -print -quit)) && npm test

- rule_id: "CR-033"
  title: "一時的にスキップしたテストは必ずbacklog.ymlのskip_testsに記録する"
  description: |
    型チェック厳格化や例外ラップ仕様調整などの理由で一時的にスキップしたテストは、必ず `docs/backlog.yml` の `skip_tests` セクションに記録すること。スキップ理由・対象ファイル・テスト名を明記し、再開時に参照できるようにする。これにより、テストの抜け漏れや恒久的なスキップの放置を防ぐ。
  category: "テスト・運用ルール"
  example_bad: |
    # テストを一時的にskipしたが、backlog.ymlに記録していない
    @pytest.mark.skip(reason="MagicMock型チェックエラー")
    def test_execute_all_new_issues(...):
        ...
  example_good: |
    # テストをskipしたら必ずbacklog.ymlに記録
    # docs/backlog.yml
    skip_tests:
      - category: 型チェック厳格化によるMagicMockエラー回避
        reason: UseCaseの依存注入でisinstanceチェックが厳格化され、MagicMockがTypeErrorとなるため一時的にスキップ
        files:
          - webapp/core_logic/tests/use_cases/test_create_issues.py
        tests:
          - test_execute_all_new_issues

- rule_id: "CR-BE-API-001"
  description: |
    Django REST Frameworkでファイルアップロード＋AI解析APIを実装する際は、
    - ファイル拡張子・サイズの厳格なバリデーションを行うこと
    - APIキー（GitHub PAT, AIサービスキー）はリクエストヘッダーから受け取り、メモリ上で一時的に保持し、永続化しないこと
    - 解析結果モデルはDRFシリアライザでJSON化し、異常系も明確なHTTPステータス・メッセージで返すこと
    - すべての正常・異常系をpytest等で網羅的にテストすること
  category: "API設計・セキュリティ・テスト"
  example_good: |
    class UploadAndParseView(APIView):
        def post(self, request, ...):
            # ...バリデーション...
            github_pat = request.headers.get('X-GitHub-PAT')
            ai_api_key = request.headers.get('X-AI-API-KEY')
            # ...AI解析...
            return Response(serializer.data, status=200)
  example_bad: |
    # APIキーをDB等に保存してしまう
    save_api_key_to_db(api_key)
    # バリデーションや異常系レスポンスが曖昧

- rule_id: "CR-023"
  title: "Djangoアプリのテストで依存サービスの副作用を回避する"
  description: |
    AI外部APIや重いサービスの初期化がViewのモジュールロード時に発生する場合、テストではpatchや依存注入で副作用を回避する。mockの適用範囲はインスタンス生成・メソッド呼び出しの両方をカバーすること。
  category: "テスト・依存注入"
  example_bad: |
    # Viewのモジュールロード時にAIParser等を直接初期化
    ai_parser = AIParser(settings=settings)
    parse_service = ParseIssueFileService(ai_parser)
  example_good: |
    # テスト時はpatchでAIParser/ParseIssueFileServiceの初期化・メソッドをモック
    @patch('core_logic.adapters.ai_parser.AIParser.__init__', return_value=None)
    @patch('core_logic.services.parse_issue_file_service.ParseIssueFileService.parse')
    def test_upload_valid_file(...):