# docs/backlog.yml

document_info:
  title: "Product Backlog for GitHub Automation Tool"
  version: "2.2" # AIパーサー戦略のさらなる明確化を反映
  last_updated: "2025-06-03 (JST)" # 更新日
  status: "Refining AI Parser Strategy - Dynamic Rule Inference for Delimiters and Mapping"
  source_documents_integrated:
    - "docs/agile-practice.yml (v2.3)"
    - "docs/issues.yml (v2.3)"
  related_documents:
    - "docs/requirements.yml (v2.5+)"
    - "docs/glossary.md"
    - "docs/ui_ux_specifications.md"
    - "docs/github_setup_defaults.yml"
    - "docs/user-stories/US-001/US-001_activity.md" # US-001のアクティビティ図
    - "docs/user-stories/US-001/US-001_sequence.md" # US-001のシーケンス図
    - "docs/diagrams/context-diagram.md (To be created)"
    - "docs/diagrams/architecture-diagram.md (To be created)"

development_approach_guidelines:
    preface: |
      このセクションは、本プロダクトバックログのアイテム（ユーザーストーリーやテクニカルタスク）を
      具体化し、実装に進む上での基本的な考え方や、設計を支援する図の活用方法についての方針を示す。
      チームメンバーは、これらの指針を参考に、効果的かつ効率的な開発を心がける。

    initial_steps_for_implementation:
      - step_name: "1. Backlog Item Prioritization and Sprint Planning"
        description: |
          プロダクトオーナー（または相当する役割）が中心となり、本バックログのアイテムに優先順位を付け、
          スプリント（または開発イテレーション）で取り組む範囲（スプリントバックログ）を決定する。
          早期に価値を提供しフィードバックを得るため、コアとなる機能フローの確立を優先的に検討する
          （例: Web UIのファイルアップロード→AIによるルール推論と解析→一覧表示→選択）。
      - step_name: "2. Detailed Behavior Clarification for Selected Items"
        description: |
          スプリントバックログに選択されたユーザーストーリーについて、アクセプタンスクライテリアを基に、
          より詳細なシナリオ、期待される動作、正常系・異常系のフローをチーム内で明確に合意する。
          この段階で、アクティビティ図やシーケンス図の作成が推奨される。
      - step_name: "3. Key Data Model Finalization (as needed)"
        description: |
          特に初期のユーザーストーリー（例: US-001）に取り組む際には、主要なデータモデル
          （例: `ParsedSourceFileContent` のメタ情報フィールド、AIが生成するルール表現形式）の具体的な構造をFIXさせる。
          これにより、コンポーネント間のデータ連携が明確になる。
      - step_name: "4. Service Layer Design (for Web UI, if adopted)"
        description: |
          Web UI向けにアプリケーションサービス層を導入する場合、主要なUIアクションに対応する
          サービスメソッドのインターフェース（入力と出力）を定義する。

    ai_parser_strategy:
      concept: |
        AIパーサーの主要な役割は、入力ファイル全体を分析し、以下の2種類のルールを動的に推論・生成することにある。
        1. **Issue区切りルール:** ファイル内で何がIssueブロック/レコードの開始を示すか（例: 特定のキー、Markdownのヘッダーパターン）。同一ファイル内ではこの開始パターンは共通であると仮定する。
        2. **フィールドマッピングルール:** 推論された各Issueブロック/レコード内で、どの部分（キーや記述）が`IssueData`のどのフィールドに対応するか。
        これらの推論されたルールに基づき、後続の処理でファイルが分割され、IssueDataにマッピングされる。
      key_considerations:
        - "AI Rule Generation Accuracy: AIが生成するルールの精度と安定性の検証が重要。誤ったルールが生成された場合でも、Web UIでは解析結果をユーザーが確認し、CLIではDryRunや中間出力で確認できる手段を提供する。"
        - "Rule Representation: AIが生成するルール（区切り、マッピング）の表現形式（例: Regex, JSONPath, Custom DSL）と、それを後続処理が解釈する方法の設計。これはTASK-RULE-REPRESENTATIONで扱う。"
        - "Prompt Engineering: 高度なルール推論を実現するためのプロンプト設計と、設定ファイルや外部ファイル（TASK-PROMPT-MANAGEMENTで検討）によるプロンプト管理。"
        - "User Feedback Loop: AIが生成したルールや、それに基づく解析結果をユーザーが確認し、（将来的には）UI上で修正・調整できる仕組みの検討。"
        - "Processing Steps: ルール推論と、それに基づく分割・マッピングの処理ステップを効率的に行う。AIが一括して推論・構造化出力を試みるか、段階的に処理するか検討。"
    guidelines_for_using_diagrams:
      - diagram_type: "Activity Diagram"
        purpose: "ユーザー操作フロー、システム内部の主要処理ステップ、条件分岐、繰り返し処理を視覚的に明確にする。"
        timing_and_use_case: |
          - ユーザーストーリーの振る舞いを具体化する初期段階。
          - 複雑なアルゴリズムやビジネスロジックの内部フローを整理する際。
          - チーム内で業務プロセスやユーザーシナリオの共通理解を形成する際。
        how_to_use: "開始/終了点、アクション、判断、マージ、フォーク/ジョインでフローを描画。必要に応じてスイムレーンで担当コンポーネントを区別。"

      - diagram_type: "Sequence Diagram"
        purpose: "特定の機能を実現するための、オブジェクト（コンポーネント、クラス）間の時間軸に沿ったメッセージ交換と相互作用を詳細に示す。"
        timing_and_use_case: |
          - アクティビティ図で大まかな流れを掴んだ後、コンポーネント間の具体的なIF（メソッド呼び出し、データ授受）を設計する際。
          - 各オブジェクトの責務を明確化する際。
          - 非同期処理や外部API連携のシーケンスを検討する際。
          - 特にcore_logicのUseCaseとAdapter間、Adapterと外部API間のインタラクション明確化に有効。
        how_to_use: "ライフライン、メッセージ（同期/非同期）、活性化区間、応答メッセージで描画。"

      - diagram_type: "Component Diagram (Detailed Level)"
        purpose: "システムを構成する主要コンポーネント（クラスやモジュール）と、それらの間の静的な依存関係やインターフェースを視覚化する。"
        timing_and_use_case: |
          - より詳細なアーキテクチャ設計や議論を行う際。
          - あるコンポーネント変更時の影響範囲を分析する際。
          - 新規メンバーへのシステム構成説明。
        how_to_use: "コンポーネント、インターフェース、依存関係、ポートで描画。"

      - diagram_type: "Data Model Diagram (or Class Diagram for models)"
        purpose: "システムが扱う主要データ（ドメインモデル）の構造、属性、型、関連性を視覚的に表現する。"
        timing_and_use_case: |
          - `ParsedSourceFileContent` や `IssueData` などの詳細設計時。
          - モデル間の関連性（1対多など）を明確にし、データ整合性を担保する設計を行う際。
        how_to_use: "エンティティ（クラス）、属性、型、リレーションシップで描画。"

      - diagram_type: "State Transition Diagram (State Machine Diagram)"
        purpose: "特定のオブジェクトやシステムが時間経過やイベント発生に伴い、どのように状態を変化させるかを示す。"
        timing_and_use_case: |
          - Web UIの動的な振る舞い（例: 非同期処理中の状態変化）の設計時。
          - バックログアイテムのワークフロー（ステータス遷移）定義。
        how_to_use: "状態、遷移、イベント、アクションで描画。"

    recommended_workflow_for_diagrams: |
      1. スプリントで取り組むユーザーストーリーを選択する。
      2. そのユーザーストーリーの主要なフローを **アクティビティ図** で大まかに把握する。
      3. アクティビティ図で洗い出された主要な処理やコンポーネント間のやり取りを **シーケンス図** で詳細化し、インターフェースやデータフローを明確にする。
      4. 上記の過程で、扱うデータモデルが複雑であれば **データモデル図** で整理する。
      5. コンポーネント間の静的な依存関係や全体の構造が複雑であれば **コンポーネント図** で整理する。
      6. UIの状態遷移や特定のオブジェクトのライフサイクルが複雑であれば **状態遷移図** を描く。
      7. これらの図を基に、実装タスクを具体化し、本バックログのテクニカルタスクを更新・詳細化する。
      8. 作成した図はチームで共有し、認識合わせとレビューを行う。図は完璧を目指すより、コミュニケーションと設計の補助を目的とする。

epics:
  - epic_id: "EPIC-WEBUI-CORE" # docs/issues.yml からも参照
    title: "Web UI基本機能"
    description: "ファイル読込、Issue表示・選択、ローカル保存など、Web UIのコア機能群。"
    user_stories:
      - "US-001"
      - "US-002"
      - "US-004"
      - "US-006" # Web UI DryRun & AI Config

  - epic_id: "EPIC-DATAPARSING" # docs/issues.yml からも参照 (旧 EPIC-CORELOGIC の一部)
    title: "データ解析とマッピング (AI-driven Rule Inference)" # タイトルにAIの役割を追記
    description: "多様な入力ファイル形式のAIによる分析、区切りとマッピングのルール推論、およびIssueDataモデルへの変換機能群。"
    user_stories:
      - "US-001" # 解析とマッピングは US-001 の主要部分

  - epic_id: "EPIC-GITHUB-INTEGRATION" # docs/issues.yml からも参照 (旧 EPIC-CORELOGIC の一部)
    title: "GitHub連携機能"
    description: "GitHubリソース（リポジトリ、Issue、ラベル、マイルストーン、プロジェクト）の作成・連携機能群。"
    user_stories:
      - "US-003"
      - "US-006" # Web UI DryRun

  - epic_id: "EPIC-CLI-MAINTENANCE" # docs/issues.yml からも参照
    title: "CLI機能の維持と同期"
    description: "既存CLI機能の維持と、Web UIで開発されたコアロジックへの追従。"
    user_stories:
      - "US-005" # CLI DryRun を含む

  - epic_id: "EPIC-INFRA-CONFIG" # docs/issues.yml からも参照
    title: "設定管理・実行環境整備"
    description: "アプリケーションの設定管理、実行環境（コンテナ、認証等）の整備。"
    user_stories:
      - "US-006" # Web UI AI Config

user_stories:
  - story_id: "US-001"
    title: "Web UIでのIssueファイルのアップロード、AIによる区切り・マッピングルール推論と解析、一覧表示" # タイトル更新
    description: "開発者として、Issue情報ファイル（Markdown, YAML, JSON）をWeb UIからアップロードし、AIがファイル内容からIssueの区切り方（各Issueの先頭キー/開始パターン）と各フィールドのマッピングルールを推論し、そのルールに基づいて解析されたIssueの一覧を画面で確認したい。これにより、多様なフォーマットやキーの揺らぎがあるファイルからでも効率的にIssue情報を把握できる。" # description更新
    acceptance_criteria:
      - "サポートするファイル形式（.md, .yml, .json）で、10MB以下のファイルをアップロードできる。"
      - "アップロードされたファイル全体がAIパーサーに渡され、Issueの区切りルール（先頭キー/開始パターン）とフィールドマッピングルールが推論される。"
      - "推論された区切りルールに基づき、ファイルがIssueブロックに分割される。"
      - "推論されたフィールドマッピングルールに基づき、各Issueブロックが`IssueData`オブジェクトにマッピングされる。"
      - "上記の結果が`ParsedSourceFileContent`オブジェクト（`IssueData`リストとファイル全体のメタ情報を含む）として生成される。"
      - "生成された`ParsedSourceFileContent`内の`IssueData`リストが、Web UI上に一覧形式で表示される。"
      - "Issueの主要な情報（AIによってマッピングされたタイトル、担当者候補、ラベル候補など）が一覧で確認できる。"
      - "ファイル読み込みエラーやAIによるルール推論・解析エラーが発生した場合、適切なエラーメッセージがUIに表示される。"
    technical_tasks:
      - "TASK-WEBUI-FILEUPLOAD-IMPL"
      - "TASK-CORELOGIC-AI-RULE-INFERENCE" # 区切りルールとマッピングルール両方の推論
      - "TASK-CORELOGIC-RULE-BASED-SPLITTER"
      - "TASK-CORELOGIC-RULE-BASED-MAPPER"
      - "TASK-WEBUI-DISPLAY-IMPL" # (サブタスク含む)
    notes: |
      - [AI戦略] AIパーサーはファイル全体から「区切りルール（先頭キー/開始パターン）」と「フィールドマッピングルール」を推論する。その後、これらのルールを適用してIssueを分割・構造化する。
      - [ユーザー確認] WebUIでは、AIによる解析結果（分割・マッピング結果）をユーザーが確認し、問題があれば登録前に認識できる。CLIではDryRunや中間出力で確認手段を提供する。
      - [プロンプト管理] AIへのプロンプトはTASK-PROMPT-MANAGEMENTで外部ファイル化を検討。
      - [ルール表現] AIが生成するルールの形式はTASK-RULE-REPRESENTATIONで設計する。
    referenced_requirements_ids:
      - "UC-Web-001 (フロー1-6)"
      - "FR-WebUI-001"
      - "FR-File-001"
      - "FR-Parse-001" # 実現方法がAI中心に大きくシフト
      - "FR-Map-002"   # 実現方法がAI中心に大きくシフト
      - "FR-Display-001"
    related_epic_ids: ["EPIC-WEBUI-CORE", "EPIC-DATAPARSING"]
    size_estimate: "[SP: 13]" # 変更なし（AI戦略の複雑性を既に考慮）
    dependencies_guessed:
      - "TASK-CORELOGIC-AI-RULE-INFERENCE" # 以前のTASK-DATAMAP-IMPLがこれに該当
    status: "To Do"
    priority: "High"

  - story_id: "US-002"
    title: "Web UIでの処理対象Issueの選択"
    description: "開発者として、Web UIに表示されたIssue一覧の中から、GitHubへの登録やローカル保存の対象とするIssueを個別に、または一括で選択したい。これにより、必要なIssueのみを効率的に処理できる。"
    acceptance_criteria:
      - "Issue一覧の各項目にチェックボックスが表示され、個別に選択/非選択できる。"
      - "「すべて選択」「すべて解除」のような一括選択機能がある。"
      - "選択されたIssueの情報がバックエンドに正しく送信される。"
    technical_tasks:
      - "TASK-WEBUI-SELECT-JS"          # issues.yml の TASK-WEBUI-ISSUE-DISPLAY-JS と同等
      - "TASK-WEBUI-SELECT-BACKEND"     # issues.yml の TASK-WEBUI-ISSUE-DISPLAY (バックエンド連携部分)と関連
    related_epic_ids: ["EPIC-WEBUI-CORE"]
    size_estimate: "[SP: 3]"
    dependencies_guessed:
      - "US-001"
    status: "To Do"
    priority: "High"

  - story_id: "US-003"
    title: "Web UIからのGitHubへのIssue一括登録"
    description: "開発者として、Web UIで選択したIssue群を、指定したGitHubリポジトリ（および任意でプロジェクト）に一括で登録したい。ラベル、マイルストーン、担当者も適切に設定されること。DryRunモードも利用したい。"
    acceptance_criteria:
      - "UI上でGitHubリポジトリ名（owner/repo形式）を入力できる。"
      - "UI上で任意でGitHubプロジェクト名（またはID/URL）を入力できる。"
      - "UI上でDryRunモードのON/OFFを選択できる。"
      - "「GitHubへ登録」ボタン押下時、選択されたIssueと設定情報がバックエンドに送信される。"
      - "バックエンド（アプリケーションサービス層経由）で`core_logic`の`CreateGitHubResourcesUseCase`が呼び出される。"
      - "処理結果（成功、失敗、スキップ、DryRun結果）がUIにフィードバックされる。"
    technical_tasks:
      - "TASK-WEBUI-GITHUBFORM-IMPL"    # issues.yml の TASK-WEBUI-GITHUB-ACTION の一部
      - "TASK-APPSERVICE-GITHUB-CALL"   # issues.yml の TASK-WEBUI-GITHUB-ACTION の一部
      - "TASK-CORELOGIC-GITHUB-MAIN"    # issues.yml の TASK-CORELOGIC-GITHUB-MAIN
      - "TASK-GITHUB-CLIENTS-SETUP"   # issues.yml から
    related_epic_ids: ["EPIC-WEBUI-CORE", "EPIC-GITHUB-INTEGRATION"] # EPIC-CORELOGICからGITHUB-INTEGRATIONへ
    size_estimate: "[SP: 13]"
    dependencies_guessed:
      - "US-001"
      - "US-002"
      - "TASK-CORELOGIC-AIPARSE-CALL"
      - "TASK-GITHUB-CLIENTS-SETUP"
    notes: "[分割案あり] リポジトリ作成、ラベル作成、マイルストーン作成、Issue作成、プロジェクト連携の各機能を個別の（より小さな）ユーザーストーリーとして扱うことも可能かもしれません。"
    status: "To Do"
    priority: "High"

  - story_id: "US-004"
    title: "Web UIからの解析済みIssueのローカル保存"
    description: "開発者として、Web UIで解析・表示されたIssue情報（または選択したIssue群）を、ローカルファイルシステムにYAML形式で分割保存したい。保存されたファイル群の目次となるindex.htmlも生成されること。"
    acceptance_criteria:
      - "UI上でローカル保存アクションをトリガーできる（例: 保存ボタン）。"
      - "バックエンド（アプリケーションサービス層経由）で`core_logic`のローカル保存用UseCase（仮称 `LocalSaveUseCase`）が呼び出される。"
      - "指定された（またはデフォルトの）ディレクトリに、IssueごとにYAMLファイルが作成される。"
      - "保存されたYAMLファイルへのリンクを含む`index.html`が同ディレクトリに作成される。"
      - "処理結果がUIにフィードバックされる。"
    technical_tasks:
      - "TASK-WEBUI-LOCALSAVEFORM-IMPL" # issues.yml の TASK-FILESPLIT-IMPL のUI部分
      - "TASK-APPSERVICE-LOCALSAVE-CALL" # issues.yml の TASK-FILESPLIT-IMPL のサービス連携部分
      - "TASK-CORELOGIC-LOCALSAVE-IMPL"  # issues.yml の TASK-FILESPLIT-IMPL のコアロジック部分
    related_epic_ids: ["EPIC-WEBUI-CORE"]
    size_estimate: "[SP: 5]"
    dependencies_guessed:
      - "US-001"
      - "TASK-CORELOGIC-AIPARSE-CALL" # 旧TASK-DATAMAP-IMPL
    status: "To Do"
    priority: "Medium"

  - story_id: "US-005"
    title: "CLIからのIssue一括登録とDryRun"
    description: "開発者として、CLIからIssue情報ファイルとGitHubリポジトリ名を指定し、Issue、ラベル、マイルストーン等を一括で登録したい。DryRunモードも利用したい。"
    acceptance_criteria:
      - "CLIでファイルパス、リポジトリ名、プロジェクト名（任意）、DryRunフラグを指定できる。"
      - "`core_logic`の`CreateGitHubResourcesUseCase`が呼び出され、処理が実行される。"
      - "処理結果がコンソールに`CliReporter`を通じて出力される。"
    technical_tasks:
      - "TASK-CLI-ARGS-PARSE"         # issues.yml から
      - "TASK-CLI-CORELOGIC-CALL"     # issues.yml から
      - "TASK-CLI-REFACTOR"         # issues.yml の TASK-CLI-MAINTENANCE と関連
    related_epic_ids: ["EPIC-CLI-MAINTENANCE", "EPIC-GITHUB-INTEGRATION"]
    size_estimate: "[SP: 5]"
    dependencies_guessed:
      - "TASK-CORELOGIC-AIPARSE-CALL"
      - "TASK-CORELOGIC-GITHUB-MAIN" # CreateGitHubResourcesUseCase
    status: "Partially Done" # issues.yml のステータスを反映
    priority: "High"

  - story_id: "US-006"
    title: "Web UIでのDry Runモードの提供とAI設定"
    description: "開発者として、Web UIでGitHubへの登録処理を実行する際にDry Runモードを選択したい。また、Issue解析に使用するAIプロバイダー、モデル、APIキーをUI上で設定したい。"
    acceptance_criteria:
      - "UI上でDryRunモードのON/OFFを選択できる (US-003のフォーム内)。"
      - "Dry Runモード実行時、作成/設定される予定のリソース情報がUI上にフィードバックされる。"
      - "UI上にAIプロバイダー選択（OpenAI, Gemini）が表示される。"
      - "選択プロバイダーに応じたモデル名選択ドロップダウンが動的に更新される。"
      - "APIキー入力フィールドが表示される。"
      - "設定されたAI情報がIssue解析時にバックエンドで利用される。"
    technical_tasks:
      - "TASK-WEBUI-AICONFIG-FORM-IMPL" # issues.yml から
      - "TASK-APPSERVICE-AICONFIG-HANDLE" # issues.yml から
      # DryRun UIは TASK-WEBUI-GITHUBFORM-IMPL に含まれる
    referenced_requirements_ids:
      - "UC-Web-001 (DryRun, AI Config)"
      - "3. スコープ定義 (処理: Dry Runモード)"
      - "2. システム化の目的とゴール (Web UI機能: AI設定)"
    related_epic_ids: ["EPIC-WEBUI-CORE", "EPIC-GITHUB-INTEGRATION", "EPIC-INFRA-CONFIG"]
    size_estimate: "[SP: 3]"
    dependencies_guessed:
      - "US-003"
    notes: "元のUS-006のWeb UI DryRun部分はUS-003のGitHub登録フォームと統合的に扱う。このUSはAI設定UIに焦点を当てる。"
    status: "To Do"
    priority: "Medium"

technical_tasks:
  # --- docs/issues.yml から移行・整理されたテクニカルタスク ---
  # 各タスクの詳細説明、関連ユーザーストーリーID、ステータス、担当者、メモなどを充実させる

  - task_id: "TASK-DJANGO-SETUP"
    title: "Djangoプロジェクト初期セットアップとBootstrap5導入"
    description: |
      Djangoアプリケーションの基本的な骨格を構築し、Dockerコンテナ環境での実行基盤を整備しました。
      - Djangoプロジェクト (`webapp_project`) およびアプリケーション (`app`) の作成と基本設定。
      - `settings.py` の設定（`INSTALLED_APPS`, 静的ファイル, テンプレート）。
      - Bootstrap5のCSS/JSファイルの配置。
      - ベースHTMLテンプレート (`base.html`) とトップページ用テンプレート (`top_page.html`) 作成。
      - Dockerコンテナ設定 (`docker-compose.yml`, `Dockerfile`)。
      - 基本的な動作確認テスト (`app/tests.py`)。
    related_epic_ids: ["EPIC-WEBUI-CORE", "EPIC-INFRA-CONFIG"]
    related_user_story_ids: [] # 直接的なユーザーストーリーはないが、多くのWebUIストーリーの前提
    status: "Done"
    priority: "High"
    resolved_date: "2025-05-24 (JST)"
    referenced_requirements_ids: ["FR-WebUI-001", "8. 非機能要件 (技術スタック)"]
    size_estimate: "[SP: 3]"
    notes: |
      完了確認: ユーザー報告と提供ファイルに基づき完了。
      関連ファイル: settings.py, views.py, base.html, top_page.html, tests.py, docker-compose.yml, README.md.

  - task_id: "TASK-CORELOGIC-AI-RULE-INFERENCE"
    title: "CoreLogic: AIによる区切りルール(先頭キー/開始パターン)とフィールドマッピングルールの推論エンジン実装" # タイトル更新
    description: "AIパーサーの中核機能。入力されたファイルコンテンツ全体を分析し、Issueの区切り方（各Issueの先頭キー/開始パターン）と各Issue内のデータからIssueDataフィールドへのマッピングルールを推論・生成する。プロンプトエンジニアリング、AIモデルとの連携、config.yamlからのヒント活用を含む。" # description更新
    related_user_story_ids: ["US-001"]
    related_epic_ids: ["EPIC-DATAPARSING"]
    status: "To Do"
    priority: "High"
    dependencies_guessed: ["TASK-PROMPT-MANAGEMENT", "TASK-RULE-REPRESENTATION"]
    size_estimate: "[SP: 8]"

  - task_id: "TASK-CORELOGIC-RULE-BASED-SPLITTER"
    title: "CoreLogic: AI推論「区切りルール」に基づくIssueブロック分割処理の実装" # タイトル更新
    description: "AIが推論した「区切りルール（先頭キー/開始パターン）」に基づき、元のファイルコンテンツをIssueブロックのリスト (`IntermediateParsingResult`) に分割するルールベースの処理モジュールを実装する。" # description更新
    related_user_story_ids: ["US-001"]
    related_epic_ids: ["EPIC-DATAPARSING"]
    status: "To Do"
    priority: "High"
    dependencies_guessed: ["TASK-CORELOGIC-AI-RULE-INFERENCE", "TASK-RULE-REPRESENTATION"]
    size_estimate: "[SP: 3]"

  - task_id: "TASK-CORELOGIC-RULE-BASED-MAPPER"
    title: "CoreLogic: AI推論「フィールドマッピングルール」に基づくIssueDataへのマッピング処理の実装" # タイトル更新
    description: "AIが推論した「フィールドマッピングルール」と、分割されたIssueブロックリストに基づき、各ブロックを`IssueData`オブジェクトに変換し、最終的に`ParsedSourceFileContent`を生成するマッパー処理を実装する。" # description更新
    related_user_story_ids: ["US-001"]
    related_epic_ids: ["EPIC-DATAPARSING"]
    status: "To Do"
    priority: "High"
    dependencies_guessed: ["TASK-CORELOGIC-AI-RULE-INFERENCE", "TASK-RULE-REPRESENTATION"]
    size_estimate: "[SP: 5]"

  - task_id: "TASK-PROMPT-MANAGEMENT"
    title: "Infra: AIプロンプトの外部ファイル管理機構の実装"
    description: "AIパーサーが使用するプロンプトをコードから分離し、外部ファイル（例: .txt, .md, またはconfig.yaml内の専用セクション）から読み込んで利用できる仕組みを実装する。"
    related_epic_ids: ["EPIC-INFRA-CONFIG", "EPIC-DATAPARSING"]
    status: "To Do"
    priority: "Medium"
    size_estimate: "[SP: 2]"

  - task_id: "TASK-RULE-REPRESENTATION"
    title: "Design: AI生成ルールの表現形式の設計と標準化"
    description: "AIパーサーが生成する「区切りルール（先頭キー/開始パターン）」と「フィールドマッピングルール」を、後続のルールベース処理が解釈可能な一貫したデータ構造または形式（例: JSON Schemaベース、カスタムDSLなど）で表現する方法を設計・定義する。"
    related_epic_ids: ["EPIC-DATAPARSING"]
    status: "To Do"
    priority: "High"
    dependencies_guessed: ["TASK-CORELOGIC-AI-RULE-INFERENCE"]
    size_estimate: "[SP: 3]"

  - task_id: "TASK-FILEPARSE-IMPL"
    title: "ファイル形式別基本パーサー (役割見直し)" # タイトルに役割見直しを追記
    description: | # description更新
      AIによるルール推論を前提とし、ファイル形式（MD, YAML, JSON）の基本的な構造を検証したり、
      AIが処理しやすいように非常に大まかな前処理（例: コメント除去、エンコーディング確認など）を行う最小限のパーサー機能。
      AIが推論した「区切りルール」を適用する処理は TASK-CORELOGIC-RULE-BASED-SPLITTER が担う。
    related_epic_ids: ["EPIC-DATAPARSING"]
    related_user_story_ids: ["US-001"]
    status: "To Re-evaluate" # ステータス変更
    priority: "Medium"
    # ... (他のフィールドも見直し)
  # ... (既存の他のテクニカルタスクも、この新しいAIパーサー戦略との関連を見直す)