title: "GitHub Automation Tool - Agile Requirements"
version: "2.3"
last_updated: "2025-05-24 (JST)"
status: "Draft" # Changed from "仕様見直し中" to Draft for agile context
original_requirements_doc_ref: "masa-codehub/github-auto-setup/github-auto-setup-687f29b0f6546c0e3834343e6186a60f9a1d8f40/docs/requirements.md" #

epics:
  - id: "EPIC-WEBUI-CORE"
    name: "Web UI基本機能"
    description: "ファイル読込、Issue表示・選択、ローカル保存など、Web UIのコア機能群。"
  - id: "EPIC-DATAPARSING"
    name: "データ解析とマッピング"
    description: "多様な入力ファイル形式の解析とIssueDataモデルへのデータマッピング機能群。"
  - id: "EPIC-GITHUB-INTEGRATION"
    name: "GitHub連携機能"
    description: "GitHubリソース（リポジトリ、Issue、ラベル、マイルストーン、プロジェクト）の作成・連携機能群。"
  - id: "EPIC-CLI-MAINTENANCE"
    name: "CLI機能の維持と同期"
    description: "既存CLI機能の維持と、Web UIで開発されたコアロジックへの追従。"
  - id: "EPIC-INFRA-CONFIG"
    name: "設定管理・実行環境整備"
    description: "アプリケーションの設定管理、実行環境（コンテナ、認証等）の整備。"

user_stories:
  - id: "US-001"
    story: "開発者として、ブラウザでアクセス可能なWeb UIを通じてIssue情報ファイル（.md, .yml, .json）をアップロードし、内容をIssue単位で一覧表示したい。それは、手作業でのファイル確認や分割の手間を省き、効率的にIssue情報を把握するためだ。"
    acceptance_criteria:
      - "AC-001-01: Web UIにファイルアップロード機能があり、`.md`, `.yml`, `.json` ファイルを1つ以上選択してアップロードできる。"
      - "AC-001-02: アップロードされたファイルがバックエンドで読み込まれ、Issue単位に分割・解釈（データマッピング）される。"
      - "AC-001-03: 解釈された各Issueの主要情報（例: タイトル、ID、概要）がWeb UIの一覧形式で表示される。"
      - "AC-001-04: ファイル読み込みエラーや形式不正時には、UI上に適切なエラーメッセージが表示される。"
      - "AC-001-05: 一覧表示された各Issueは、後続の操作（選択、GitHub登録など）のために識別可能である。"
    referenced_requirements_ids:
      - "UC-Web-001 (フロー1-6)"
      - "FR-WebUI-001"
      - "FR-File-001"
      - "FR-Parse-001"
      - "FR-Display-001"
    related_epic_id: "EPIC-WEBUI-CORE, EPIC-DATAPARSING"
    related_layers_guessed:
      - "Adapter-UI"
      - "UseCase"
      - "Adapter-InputParser" # (新設またはAIParserの役割変更)
      - "Domain"
    size_guessed: "[SP: 8]"
    dependencies_guessed:
      - "TASK-DATAMAP-IMPL"
    notes: "[分割案あり] ファイル形式ごとのパーサー実装 (US-PARSE-MD, US-PARSE-YAML, US-PARSE-JSON) に分割可能かもしれません。"

  - id: "US-002"
    story: "開発者として、Web UIに表示されたIssue一覧から、GitHubに登録したいIssueを個別にまたは一括で選択したい。それは、必要なIssueだけを効率的にGitHubに反映させるためだ。"
    acceptance_criteria:
      - "AC-002-01: Web UIのIssue一覧で、各Issueにチェックボックス等の選択手段が提供される。"
      - "AC-002-02: 「すべて選択」「すべて解除」のような一括選択機能が提供される。"
      - "AC-002-03: ユーザーがIssueを選択すると、選択状態がUI上で視覚的に確認できる。"
      - "AC-002-04: 選択されたIssueの情報は、後続のGitHub登録処理のためにバックエンドに送信可能である。"
    referenced_requirements_ids:
      - "UC-Web-001 (フロー7)"
      - "FR-Select-001"
    related_epic_id: "EPIC-WEBUI-CORE"
    related_layers_guessed:
      - "Adapter-UI"
    size_guessed: "[SP: 3]"
    dependencies_guessed:
      - "US-001"
    notes: ""

  - id: "US-003"
    story: "開発者として、Web UIで選択したIssue群を、指定したGitHubリポジトリに一括で登録したい。それは、プロジェクトの初期セットアップを迅速に行うためだ。"
    acceptance_criteria:
      - "AC-003-01: Web UI上に、対象GitHubリポジトリ名（例: `owner/repo`）と、任意でプロジェクト名を入力または選択するフィールドがある。"
      - "AC-003-02: 「GitHubへ登録」ボタンを押下すると、選択されたIssueとリポジトリ情報がバックエンドに送信される。"
      - "AC-003-03: バックエンドで`CreateGitHubResourcesUseCase`が呼び出され、リポジトリ作成（存在しない場合）、ラベル・マイルストーン作成（存在しない場合）、担当者検証、Issue作成、プロジェクト連携（指定時）が実行される。"
      - "AC-003-04: 処理結果（成功、失敗、スキップ、エラー詳細）がUI上にフィードバックされる。"
      - "AC-003-05: GitHub PATが無効な場合や権限不足の場合、適切な認証エラーがUIに表示される。"
      - "AC-003-06: 同名のOpen Issueが既に存在する場合、該当Issueはスキップされ、その旨がUIに表示される。"
    referenced_requirements_ids:
      - "UC-Web-001 (フロー7, 9-11)"
      - "FR-GitHub-Register-001"
      - "FR-Feedback-001"
      - "システムが満たすべき主要な成功基準 (機能: UI, GitHub連携, 担当者検証, プロジェクト連携)"
    related_epic_id: "EPIC-GITHUB-INTEGRATION, EPIC-WEBUI-CORE"
    related_layers_guessed:
      - "Adapter-UI"
      - "UseCase"
      - "Adapter-GitHub" # (GitHubRestClient, GitHubGraphQLClient, AssigneeValidatorを含む)
      - "Domain"
    size_guessed: "[SP: 13]"
    dependencies_guessed:
      - "US-001"
      - "US-002"
      - "TASK-DATAMAP-IMPL"
      - "TASK-GITHUB-CLIENTS-SETUP"
    notes: "[分割案あり] リポジトリ作成、ラベル作成、マイルストーン作成、Issue作成、プロジェクト連携の各機能を個別の（より小さな）ユーザーストーリーとして扱うことも可能かもしれません。"

  - id: "US-004"
    story: "開発者として、Web UIで読み込んだIssue群（または選択したIssue群）を、指定したローカルディレクトリにIssueごとのYAMLファイルとして分割・保存したい。それは、ローカル環境でのIssueデータの整理と再利用を容易にするためだ。"
    acceptance_criteria:
      - "AC-004-01: Web UI上に、ローカル保存先のディレクトリパスを指定する機能がある。"
      - "AC-004-02: 「ローカルに分割保存」ボタンを押下すると、現在UIに表示されている（または選択されている）Issueデータと保存先パスがバックエンドに送信される。"
      - "AC-004-03: バックエンドで、指定されたディレクトリ直下に`issues/`サブディレクトリと`index.html`ファイルが生成される。"
      - "AC-004-04: 各Issueデータは、`issues/`ディレクトリ内に個別のYAMLファイルとして保存される。"
      - "AC-004-05: Issueファイル名は、Issue IDとタイトルを元にした安全なファイル名（例: `ISSUE-001_ユーザー登録機能.yaml`）である。"
      - "AC-004-06: `index.html`には、保存された全Issueのタイトルと、対応するYAMLファイルへの相対リンクがリスト形式で記述される。"
      - "AC-004-07: ファイル保存処理の結果（成功、失敗、保存パスなど）がUI上にフィードバックされる。"
      - "AC-004-08: 指定された保存先ディレクトリが存在しない、または書き込み権限がない場合、適切なエラーがUIに表示される。"
    referenced_requirements_ids:
      - "UC-Web-001 (フロー8, 10-11)"
      - "FR-SplitStore-001"
      - "システムが満たすべき主要な成功基準 (機能: ローカルファイル分割)"
    related_epic_id: "EPIC-WEBUI-CORE"
    related_layers_guessed:
      - "Adapter-UI"
      - "UseCase" # (新設: LocalFileStorageUseCaseなど)
      - "Adapter-FileSystem" # (新設)
      - "Domain" # (LocalFileSplitResult)
    size_guessed: "[SP: 5]"
    dependencies_guessed:
      - "US-001"
      - "TASK-DATAMAP-IMPL"
    notes: ""

  - id: "US-005"
    story: "開発者として、既存のCLIコマンド (`main.py`) を使用して、Issue情報ファイルからGitHubリソースを一括で登録したい。それは、自動化スクリプトや既存のワークフローでツールを利用し続けたいからだ。"
    acceptance_criteria:
      - "AC-005-01: `python -m github_automation_tool.main --file <filepath> --repo <repo_name>` コマンドが正常に実行できる。"
      - "AC-005-02: CLI実行時、Web UIと同様のIssue解釈・データマッピングロジックが使用される。"
      - "AC-005-03: GitHubへのリソース作成（リポジトリ、ラベル、マイルストーン、Issue、プロジェクト連携）が、Web UIからの実行と同等に行われる。"
      - "AC-005-04: 処理結果は、`CliReporter` を通じてコンソールに出力される。"
    referenced_requirements_ids:
      - "UC-CLI-001"
      - "FR-CLI-Sync-001"
      - "システムが満たすべき主要な成功基準 (機能: CLI)"
    related_epic_id: "EPIC-CLI-MAINTENANCE, EPIC-GITHUB-INTEGRATION"
    related_layers_guessed:
      - "Adapter-CLI" # (main.py, Typer)
      - "UseCase"
      - "Adapter-InputParser"
      - "Adapter-GitHub"
    size_guessed: "[SP: 5]"
    dependencies_guessed:
      - "TASK-DATAMAP-IMPL"
      - "CreateGitHubResourcesUseCase" # (バックエンドロジック)
    notes: ""

  - id: "US-006"
    story: "開発者として、CLIコマンドまたはWeb UIで処理を実行する際に、Dry Runモードを選択したい。それは、実際にGitHubに変更を加える前に、実行される予定の操作内容を確認し、意図しない変更を防ぐためだ。"
    acceptance_criteria:
      - "AC-006-01: CLIで`--dry-run`オプションを指定して実行した場合、GitHubへの書き込み処理は行われない。"
      - "AC-006-02: Web UI上にDry Runモードを有効にするためのチェックボックスまたはスイッチがある。"
      - "AC-006-03: Dry Runモード実行時、作成/設定される予定のリポジトリ名、ラベルリスト、マイルストーンリスト、Issueタイトルリスト、プロジェクト連携情報などがログまたはUI上に表示される。"
      - "AC-006-04: Dry Runモードでも、ファイル読み込み、Issue解釈・データマッピング、担当者検証（モックまたは実際のAPIコール）はシミュレートされる。"
    referenced_requirements_ids:
      - "UC-CLI-002"
      - "3. スコープ定義 (処理: Dry Runモード)"
      - "8. 非機能要件 (テスト容易性)"
    related_epic_id: "EPIC-GITHUB-INTEGRATION, EPIC-WEBUI-CORE, EPIC-CLI-MAINTENANCE"
    related_layers_guessed:
      - "UseCase" # (CreateGitHubResourcesUseCaseのdry_runフラグ)
      - "Adapter-UI"
      - "Adapter-CLI"
    size_guessed: "[SP: 3]"
    dependencies_guessed:
      - "CreateGitHubResourcesUseCase" #
    notes: ""

technical_tasks_and_considerations:
  - id: "TASK-DJANGO-SETUP"
    type: "Technical Task"
    content: "Djangoプロジェクトの初期セットアップと基本構成を行う。コンテナ環境でDjangoアプリケーションが起動し、Bootstrap5を利用した基本的なページが表示できる状態にする。"
    referenced_requirements_ids:
      - "FR-WebUI-001"
      - "8. 非機能要件 (技術スタック)"
    related_epic_id: "EPIC-WEBUI-CORE"
    related_layers_guessed:
      - "Adapter-UI"
      - "Infrastructure"
    size_guessed: "[SP: 3]"
    dependencies_guessed: []
    action_verification: "Dockerコンテナ内でDjango開発サーバーが起動し、ブラウザからアクセスしてBootstrap5のスタイルが適用されたサンプルページが表示されることを確認。"

  - id: "TASK-FILEPARSE-IMPL"
    type: "Technical Task"
    content: "`.md`, `.yml`, `.json` の各ファイル形式に対応したパーサーコンポーネント（または単一の適応型パーサー）を設計・実装する。これらのパーサーは、ファイルを読み込み、Issue単位のデータ構造に分割する役割を担う。"
    referenced_requirements_ids:
      - "FR-Parse-001"
    related_epic_id: "EPIC-DATAPARSING"
    related_layers_guessed:
      - "Adapter-InputParser" # (新設)
      - "Infrastructure" # (file_reader.py 利用)
    size_guessed: "[SP: 8]"
    dependencies_guessed: []
    action_verification: "各形式のサンプルファイルを用意し、パーサーが正しくIssueの塊を分離できることをユニットテストで検証。"

  - id: "TASK-DATAMAP-IMPL"
    type: "Technical Task"
    content: "分割されたIssueデータ内の構造（キーの揺らぎを許容）を解釈し、`IssueData`モデルの各フィールドに紐付ける「データマッピング」ロジックを設計・実装する。この際、AI（LangChain + OpenAI/Gemini）を活用して、入力ファイルのどの項目が`IssueData`のどのフィールドに対応するかを判断する機能を実装する。"
    referenced_requirements_ids:
      - "FR-Map-002"
      - "11. 制約条件・前提条件 (AIとパーサーの役割)"
    related_epic_id: "EPIC-DATAPARSING"
    related_layers_guessed:
      - "Adapter-AIParser" # (AIParser の改修または新設の`IssueFileInterpreter`)
      - "Domain" # (IssueData)
    size_guessed: "[SP: 13]"
    dependencies_guessed:
      - "TASK-FILEPARSE-IMPL"
    action_verification: "多様なキーを持つサンプルファイル（提供されたYAML Issue例など）に対し、AIが正しくフィールドマッピングを推論し、`IssueData`オブジェクトが生成されることをユニットテストで検証。AIへのプロンプト設計とチューニングを含む。"

  - id: "TASK-CONFIG-DATAMAP-RULES"
    type: "Technical Task"
    content: "`config.yaml`に、AIが行うデータマッピングを補助するためのルール（特定の入力キーから`IssueData`フィールドへの強制マッピング、AIへの解釈ヒントなど）を記述できるフォーマットを設計し、設定読み込み処理とAIマッピングロジックに反映する。"
    referenced_requirements_ids:
      - "11. 制約条件・前提条件 (データマッピングルールの設定)"
      - "2. システムが満たすべき主要な成功基準 (機能: 柔軟性)"
    related_epic_id: "EPIC-DATAPARSING, EPIC-INFRA-CONFIG"
    related_layers_guessed:
      - "Infrastructure" # (config.py)
      - "Adapter-AIParser"
    size_guessed: "[SP: 5]"
    dependencies_guessed:
      - "TASK-DATAMAP-IMPL"
    action_verification: "設計したルールフォーマットで`config.yaml`にルールを記述し、それがAIマッピング処理に正しく反映されることをユニットテストで確認。"

  - id: "TASK-WEBUI-FILEUPLOAD"
    type: "Technical Task"
    content: "DjangoとBootstrap5を使用し、Web UIにファイルアップロード機能（単一または複数ファイル対応）を実装する。アップロードされたファイルはバックエンドで処理できるようにする。"
    referenced_requirements_ids:
      - "FR-File-001"
    related_epic_id: "EPIC-WEBUI-CORE"
    related_layers_guessed:
      - "Adapter-UI"
    size_guessed: "[SP: 3]"
    dependencies_guessed:
      - "TASK-DJANGO-SETUP"
    action_verification: "UIからファイルをアップロードし、バックエンドの指定の場所にファイルが保存される（またはメモリ上で処理される）ことを確認。"

  - id: "TASK-WEBUI-ISSUE-DISPLAY"
    type: "Technical Task"
    content: "DjangoとBootstrap5を使用し、バックエンドから渡されたIssue情報（`List[IssueData]`など）をWeb UI上に一覧表示する機能を実装する。各Issueには選択UI（チェックボックス等）を付与する。"
    referenced_requirements_ids:
      - "FR-Display-001"
      - "FR-Select-001"
    related_epic_id: "EPIC-WEBUI-CORE"
    related_layers_guessed:
      - "Adapter-UI"
    size_guessed: "[SP: 5]"
    dependencies_guessed:
      - "TASK-DJANGO-SETUP"
      - "US-001" # (データソースとして)
    action_verification: "モックデータを使用してIssue一覧が正しく表示され、選択操作が可能であることを確認。"

  - id: "TASK-WEBUI-GITHUB-ACTION"
    type: "Technical Task"
    content: "Web UI上にGitHubリポジトリ名、プロジェクト名（任意）を入力するフォームと、「GitHubへ登録」ボタンを実装する。ボタン押下時に、選択されたIssueとフォーム入力値をバックエンドに送信し、`CreateGitHubResourcesUseCase`を実行するバックエンドAPIエンドポイントを実装する。結果をUIにフィードバックする。"
    referenced_requirements_ids:
      - "FR-GitHub-Register-001"
      - "UC-Web-001 (フロー7, 9-11)"
    related_epic_id: "EPIC-WEBUI-CORE, EPIC-GITHUB-INTEGRATION"
    related_layers_guessed:
      - "Adapter-UI"
      - "UseCase"
    size_guessed: "[SP: 8]"
    dependencies_guessed:
      - "US-003" # (UseCase呼び出し)
      - "TASK-WEBUI-ISSUE-DISPLAY"
    action_verification: "UIからGitHub登録を実行し、モックされたUseCaseが適切な引数で呼び出されること、および処理結果がUIに表示されることを確認。"

  - id: "TASK-FILESPLIT-IMPL"
    type: "Technical Task"
    content: "Web UIからの指示に基づき、解釈・マッピング済みのIssueデータを個別のYAMLファイルとしてローカルに保存し、`index.html`（目次ファイル）を生成する`IssueFileSplitter`コンポーネントを設計・実装する。保存先ディレクトリはUIから指定可能とする。"
    referenced_requirements_ids:
      - "FR-SplitStore-001"
    related_epic_id: "EPIC-WEBUI-CORE"
    related_layers_guessed:
      - "UseCase" # (新設: LocalFileStorageUseCaseなど)
      - "Adapter-FileSystem" # (新設)
    size_guessed: "[SP: 5]"
    dependencies_guessed:
      - "TASK-DATAMAP-IMPL"
    action_verification: "モックのIssueDataリストと保存先パスを指定し、期待されるディレクトリ構造とYAMLファイル群、`index.html`が生成されることをユニットテストで検証。"

  - id: "TASK-GITHUB-CLIENTS-SETUP"
    type: "Technical Task"
    content: "`GitHubRestClient`, `GitHubGraphQLClient`, `AssigneeValidator` の初期化と設定（PATの読み込みなど）が正しく行われることを確認・整備する。"
    referenced_requirements_ids:
      - "3. スコープ定義 (入力: 環境変数)"
      - "11. 制約条件・前提条件 (認証・設定)"
    related_epic_id: "EPIC-GITHUB-INTEGRATION, EPIC-INFRA-CONFIG"
    related_layers_guessed:
      - "Adapter-GitHub"
      - "Infrastructure"
    size_guessed: "[SP: 2]"
    dependencies_guessed: []
    action_verification: "設定ファイル/環境変数からPATを読み込み、各クライアントが初期化できることを確認。`test_github_connection.py` スクリプトなどを活用。"

  - id: "TASK-DOMAIN-MODEL-REVIEW"
    type: "Technical Task"
    content: "`ParsedSourceFileContent`（旧`ParsedRequirementData`）の名称と責務、および新規提案された`LocalFileSplitResult`モデルについて、実装の進行に合わせて最終的な定義を行う。"
    referenced_requirements_ids:
      - "6. ドメインモデル"
    related_epic_id: "EPIC-DATAPARSING"
    related_layers_guessed:
      - "Domain"
    size_guessed: "[SP: 1]"
    dependencies_guessed:
      - "TASK-DATAMAP-IMPL"
      - "TASK-FILESPLIT-IMPL"
    action_verification: "開発チーム内でモデル定義について合意形成する。"

  - id: "TASK-LOGGING-REPORTING-WEBUI"
    type: "Technical Task"
    content: "Djangoアプリケーションのサーバーログ設定、およびWeb UI上での処理結果（成功・エラー・進捗）のフィードバック方法を設計・実装する。`CliReporter` はCLI専用とし、Web UIではDjangoのメッセージフレームワークやAPIレスポンス、WebSocketなどを検討。"
    referenced_requirements_ids:
      - "8. 非機能要件 (レポーティング)"
      - "FR-Feedback-001"
    related_epic_id: "EPIC-WEBUI-CORE"
    related_layers_guessed:
      - "Adapter-UI"
      - "Infrastructure"
    size_guessed: "[SP: 3]"
    dependencies_guessed: []
    action_verification: "処理の各段階で適切なログが出力され、UIにユーザーフレンドリーなメッセージが表示されることを確認。"

  - id: "TASK-CLI-REFACTOR"
    type: "Technical Task"
    content: "CLI機能 (`main.py` および関連ロジック) が、Web UIのバックエンドとして再利用される新しいIssue解釈・マッピングロジックや`CreateGitHubResourcesUseCase` を利用するようにリファクタリングする。"
    referenced_requirements_ids:
      - "FR-CLI-Sync-001"
      - "UC-CLI-001"
    related_epic_id: "EPIC-CLI-MAINTENANCE"
    related_layers_guessed:
      - "Adapter-CLI"
      - "UseCase"
    size_guessed: "[SP: 5]"
    dependencies_guessed:
       - "TASK-DATAMAP-IMPL"
       - "CreateGitHubResourcesUseCase" # (改修など)
    action_verification: "既存のCLIテストケースが、新しいロジックベースで引き続きパスすることを確認。"

  - id: "TASK-TESTING-COVERAGE"
    type: "Technical Task"
    content: "主要な機能コンポーネント (UseCase, Adapters, Domain Models, Djangoビュー/サービス) に対するユニットテストをTDDスタイルで実装し、全体のコードカバレッジ目標 (例: 90%) を達成・維持する。"
    referenced_requirements_ids:
      - "2. システムが満たすべき主要な成功基準 (品質)"
    related_epic_id: "" # (全般)
    related_layers_guessed:
      - "All"
    size_guessed: "[SP: (継続的)]"
    dependencies_guessed: []
    action_verification: "`pytest --cov` を定期的に実行し、カバレッジレポートを確認。CIパイプラインに組み込む。"

questions_for_clarification:
  - "Issue更新機能の優先度: 今回のイテレーションで「更新」機能は完全にスコープ外としてよいでしょうか？それとも、基本的な更新（例: descriptionの更新）だけでも含める可能性はありますか？"
  - "ローカルファイル分割・保管機能のUI: この指示はGitHubへの登録とは独立した操作として提供するイメージでしょうか？（例: 「読み込んだIssueをローカルにYAMLで保存する」ボタンと、「選択したIssueをGitHubに登録する」ボタンが別々にあるなど）"
  - "エラー時のファイル処理: ファイルの読み込み、解析、マッピングでエラーが発生した場合、エラーのあったファイル（またはその一部のIssue）は、その後の選択リストやローカル保存、GitHub登録の対象から除外されるという理解で正しいでしょうか？エラーの粒度（ファイル全体か、Issue単位か）によって処理が変わるかどうかも確認したいです。"
  - "`config.yaml`のマッピングルール: 具体的なフォーマット例は今後の提案となりましたが、ルールベースのマッピング（例: `title_keys: [\"title\", \"Subject\"]`）と、AIによる解釈・マッピングのどちらを優先、あるいはどのように組み合わせるイメージをお持ちでしょうか？（例: ルールがあればそれを使い、なければAIが推測する、など）"